{"version":3,"file":"coin98_telegram_payment.cjs.production.min.js","sources":["../src/packages/core.ts"],"sourcesContent":["import { Bot } from \"grammy\";\nimport { get } from \"lodash-es\";\nimport { RequestPaymentParams } from \"../types\";\n\nexport class Coin98Payment{\n  private bot: Bot\n  //recommend use db for production\n  private paidUsers: Map<number, string>;\n\n  constructor(tokenId: string){\n    this.bot = new Bot(tokenId );\n    this.paidUsers = new Map<number, string>()\n  }\n\n  async sendInvoice(params: RequestPaymentParams){\n    const { chatId, product, others } = params\n\n    try {\n        const message = await this.bot.api.sendInvoice(chatId,\n            get(product, 'title'),\n            get(product, 'description'),\n            get(product, 'payload', ''),\n            get(product, 'currency'),\n            get(product, 'variants'),\n            others\n        )\n\n        return message\n    } catch (error) {\n        throw new Error(error as unknown as string)\n    }\n  }\n\n  queryPreCheckout(){\n    this.bot.on(\"pre_checkout_query\", async (ctx) => {\n        try {\n            return await ctx.answerPreCheckoutQuery(true);\n        } catch(error) {\n            throw new Error(error as unknown as string)\n        }\n    });\n  }\n\n  onPaymentSuccessful(){\n    this.bot.on(\"message:successful_payment\", (ctx) => {\n        //send notification\n\n        if (!ctx.message || !ctx.message.successful_payment || !ctx.from) {\n          return;\n        }\n      \n        this.paidUsers.set(\n          ctx.from.id,\n          ctx.message.successful_payment.telegram_payment_charge_id,\n        );\n    });\n  }\n\n  checkStatusPayment(){\n    this.bot.command(\"status\", (ctx) => {\n        const message = this.paidUsers.has(get(ctx, 'from.id') as number)\n          ? \"You have paid\"\n          : \"You have not paid yet\";\n        return ctx.reply(message);\n      });\n  }\n}"],"names":["Coin98Payment","tokenId","this","bot","Bot","paidUsers","Map","_proto","prototype","sendInvoice","_sendInvoice","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","chatId","product","others","wrap","_context","prev","next","api","get","abrupt","sent","t0","Error","stop","_x","apply","arguments","queryPreCheckout","on","_ref","_callee2","ctx","_context2","answerPreCheckoutQuery","_x2","onPaymentSuccessful","message","successful_payment","from","_this","set","id","telegram_payment_charge_id","checkStatusPayment","command","_this2","has","reply"],"mappings":"gzNASE,SAAAA,EAAYC,GACVC,KAAKC,IAAM,IAAIC,MAAIH,GACnBC,KAAKG,UAAY,IAAIC,IACtB,IAAAC,EAAAP,EAAAQ,UAqDA,OArDAD,EAEKE,uBAAW,IAAAC,EAAAC,EAAAC,IAAAC,MAAjB,SAAAC,EAAkBC,GAA4B,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,IAAAO,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OAAvBN,EAA4BD,EAA5BC,OAAQC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,OAAME,EAAAC,OAAAD,EAAAE,OAGLpB,KAAKC,IAAIoB,IAAId,YAAYO,EAC3CQ,MAAIP,EAAS,SACbO,MAAIP,EAAS,eACbO,MAAIP,EAAS,UAAW,IACxBO,MAAIP,EAAS,YACbO,MAAIP,EAAS,YACbC,GACH,OAPY,OAAAE,EAAAK,gBAAAL,EAAAM,MASC,OAAA,MAAAN,EAAAC,OAAAD,EAAAO,GAAAP,WAER,IAAIQ,MAAKR,EAAAO,IAA4B,QAAA,UAAA,OAAAP,EAAAS,UAAAf,oBAfhC,OAiBhB,SAjBgBgB,GAAA,OAAApB,EAAAqB,WAAAC,eAAAzB,EAmBjB0B,iBAAA,WACE/B,KAAKC,IAAI+B,GAAG,gCAAoB,IAAAC,EAAAxB,EAAAC,IAAAC,MAAE,SAAAuB,EAAOC,GAAG,OAAAzB,IAAAO,eAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OAAA,OAAAgB,EAAAjB,OAAAiB,EAAAhB,OAEvBe,EAAIE,wBAAuB,GAAK,OAAA,OAAAD,EAAAb,gBAAAa,EAAAZ,MAAA,OAAA,MAAAY,EAAAjB,OAAAiB,EAAAX,GAAAW,WAEvC,IAAIV,MAAKU,EAAAX,IAA4B,OAAA,UAAA,OAAAW,EAAAT,UAAAO,oBAElD,gBAAAI,GAAA,OAAAL,EAAAJ,WAAAC,iBACFzB,EAEDkC,oBAAA,sBACEvC,KAAKC,IAAI+B,GAAG,8BAA8B,SAACG,GAGlCA,EAAIK,SAAYL,EAAIK,QAAQC,oBAAuBN,EAAIO,MAI5DC,EAAKxC,UAAUyC,IACbT,EAAIO,KAAKG,GACTV,EAAIK,QAAQC,mBAAmBK,gCAGtCzC,EAED0C,mBAAA,sBACE/C,KAAKC,IAAI+C,QAAQ,UAAU,SAACb,GACxB,IAAMK,EAAUS,EAAK9C,UAAU+C,IAAI5B,MAAIa,EAAK,YACxC,gBACA,wBACJ,OAAOA,EAAIgB,MAAMX,OAEtB1C"}